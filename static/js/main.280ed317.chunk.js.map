{"version":3,"sources":["UserList.js","hooks/useInputs.js","CreateUser.js","App.js","serviceWorker.js","index.js"],"names":["User","React","memo","user","dispatch","useContext","UserDispatch","style","cursor","color","active","onClick","type","id","username","email","users","map","key","useInputs","initialForm","useState","form","setForm","useCallback","e","target","name","value","onChange","reset","nextId","useRef","placeholder","current","initialState","reducer","state","action","concat","filter","createContext","App","useReducer","count","useMemo","console","log","length","countActiveUsers","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAGMA,EAAOC,IAAMC,MAAK,YAAyB,IAATC,EAAQ,EAARA,KAC9BC,EAAWC,qBAAWC,GAE5B,OACI,6BACI,uBACIC,MAAO,CACHC,OAAQ,UACRC,MAAON,EAAKO,OAAS,QAAU,SAEnCC,QAAS,WACLP,EAAS,CAAEQ,KAAM,cAAeC,GAAIV,EAAKU,OAG5CV,EAAKW,UAVd,OAaI,kCAAQX,EAAKY,MAAb,KACA,4BAAQJ,QAAS,WACbP,EAAS,CAAEQ,KAAM,cAAeC,GAAIV,EAAKU,OAD7C,oBAmBGZ,UAAMC,MAVrB,YAA+B,IAAVc,EAAS,EAATA,MACjB,OACI,6BACKA,EAAMC,KAAI,SAAAd,GAAI,OACX,kBAAC,EAAD,CAAMA,KAAMA,EAAMe,IAAKf,EAAKU,Y,OCpB7BM,MAZf,SAAmBC,GAAc,IAAD,EACJC,mBAASD,GADL,mBACrBE,EADqB,KACfC,EADe,KAS5B,MAAO,CAACD,EANSE,uBAAY,SAAAC,GAAM,IAAD,EACNA,EAAEC,OAAlBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,MACdL,GAAQ,SAAAD,GAAI,sBAAUA,EAAV,eAAiBK,EAAOC,SAErC,IACWJ,uBAAY,kBAAMD,EAAQH,KAAc,CAACA,MCmC5CnB,MAAMC,MAzCF,WAAO,IAAD,EAC0BiB,EAAU,CACrDL,SAAU,GACVC,MAAO,KAHU,0BACZD,EADY,EACZA,SAAUC,EADE,EACFA,MAASc,EADP,KACiBC,EADjB,KAMfC,EAASC,iBAAO,GAChB5B,EAAWC,qBAAWC,GAe5B,OACI,6BACI,2BACIqB,KAAK,WACLM,YAAY,qBACZJ,SAAUA,EACVD,MAAOd,IACRA,EACH,2BACIa,KAAK,QACLM,YAAY,qBACZJ,SAAUA,EACVD,MAAOb,IACRA,EACH,4BAAQJ,QA3BC,WACbP,EAAS,CACLQ,KAAM,cACNT,KAAM,CACFU,GAAIkB,EAAOG,QACXpB,WACAC,WAGRe,IACAC,EAAOG,SAAW,IAiBd,oBC/BZ,IAAMC,EAAe,CACnBnB,MAAO,CACL,CACEH,GAAI,EACJC,SAAU,WACVC,MAAO,4BACPL,QAAQ,GAEV,CACEG,GAAI,EACJC,SAAU,SACVC,MAAO,qBACPL,QAAQ,GAEV,CACEG,GAAI,EACJC,SAAU,MACVC,MAAO,kBACPL,QAAQ,KAKd,SAAS0B,EAAQC,EAAOC,GACtB,OAAQA,EAAO1B,MACb,IAAK,cACH,MAAO,CACLI,MAAOqB,EAAMrB,MAAMuB,OAAOD,EAAOnC,OAErC,IAAK,cACH,OAAO,eACFkC,EADL,CAEErB,MAAOqB,EAAMrB,MAAMC,KAAI,SAAAd,GAAI,OACzBA,EAAKU,KAAOyB,EAAOzB,GAAnB,eAA6BV,EAA7B,CAAmCO,QAASP,EAAKO,SAAWP,OAGlE,IAAK,cACH,OAAO,eACFkC,EADL,CAEErB,MAAOqB,EAAMrB,MAAMwB,QAAO,SAAArC,GAAI,OAAIA,EAAKU,KAAOyB,EAAOzB,QAEzD,QACE,OAAOwB,GAGN,IAAM/B,EAAeL,IAAMwC,cAAc,MAyBjCC,MArBf,WAAgB,IAAD,EACaC,qBAAWP,EAASD,GADjC,mBACNE,EADM,KACCjC,EADD,KAGLY,EAAUqB,EAAVrB,MAEF4B,EAAQC,mBAAQ,kBA3DxB,SAA0B7B,GAExB,OADA8B,QAAQC,IAAI,sEACL/B,EAAMwB,QAAO,SAAArC,GAAI,OAAIA,EAAKO,UAAQsC,OAyDbC,CAAiBjC,KAAQ,CAACA,IACtD,OACE,kBAACV,EAAa4C,SAAd,CAAuBtB,MAAOxB,GAO5B,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUY,MAAOA,IACjB,wEAAgB4B,KC9DFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.280ed317.chunk.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport { UserDispatch } from './App';\r\n\r\nconst User = React.memo(function User({ user }) {\r\n    const dispatch = useContext(UserDispatch);\r\n\r\n    return (\r\n        <div>\r\n            <b\r\n                style={{\r\n                    cursor: 'pointer',\r\n                    color: user.active ? 'green' : 'black'\r\n                }}\r\n                onClick={() => {\r\n                    dispatch({ type: 'TOGGLE_USER', id: user.id });\r\n                }}\r\n            >\r\n                {user.username}\r\n            </b>\r\n            &nbsp;\r\n            <span>({user.email})</span>\r\n            <button onClick={() => {\r\n                dispatch({ type: 'REMOVE_USER', id: user.id });\r\n            }}>\r\n                삭제\r\n            </button>\r\n        </div>\r\n    );\r\n});\r\n\r\nfunction UserList( { users }) {\r\n    return (\r\n        <div>\r\n            {users.map(user => (\r\n                <User user={user} key={user.id} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(UserList);","import { useState, useCallback } from 'react';\r\n\r\nfunction useInputs(initialForm) {\r\n    const [form, setForm] = useState(initialForm);\r\n    //change\r\n    const onChange = useCallback(e => {\r\n        const { name, value } = e.target;\r\n        setForm(form => ({ ...form, [name]: value }));\r\n\r\n    }, []);\r\n    const reset = useCallback(() => setForm(initialForm), [initialForm]);    \r\n    return [form, onChange, reset];\r\n}\r\n\r\nexport default useInputs;","import React, { useRef, useContext} from 'react';\r\nimport useInputs from './hooks/useInputs';\r\nimport { UserDispatch } from './App';\r\n\r\nconst CreateUser = () => {\r\n    const [{ username, email }, onChange, reset] = useInputs({\r\n        username: '',\r\n        email: ''\r\n      });\r\n\r\n    const nextId = useRef(4);\r\n    const dispatch = useContext(UserDispatch);\r\n\r\n    const onCreate = () => {\r\n        dispatch({\r\n            type: 'CREATE_USER',\r\n            user: {\r\n                id: nextId.current,\r\n                username,\r\n                email\r\n            }\r\n        });\r\n        reset();\r\n        nextId.current += 1;\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <input\r\n                name=\"username\"\r\n                placeholder=\"계정명\"\r\n                onChange={onChange}\r\n                value={username}\r\n            />{username}\r\n            <input\r\n                name=\"email\"\r\n                placeholder=\"이메일\"\r\n                onChange={onChange}\r\n                value={email}\r\n            />{email}\r\n            <button onClick={onCreate}>등록</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(CreateUser);\r\n// React.memo는 컴포넌트의 props 가 바뀌지 않았다면, \r\n// 리렌더링을 방지하여 컴포넌트의 리렌더링 성능 최적화  함","import React, { useReducer, useMemo } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'tester',\n      email: 'tester@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'liz',\n      email: 'liz@example.com',\n      active: false\n    }\n  ]\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_USER':\n      return {\n        users: state.users.concat(action.user)\n      };\n    case 'TOGGLE_USER':\n      return {\n        ...state,\n        users: state.users.map(user =>\n          user.id === action.id ? { ...user, active: !user.active } : user\n        )\n      };\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      };\n    default:\n      return state;\n  }\n}\nexport const UserDispatch = React.createContext(null);\n// createContext 의 파라미터에는 Context 의 기본값을 설정\n// 값을 따로 지정하지 않을 경우 사용되는 기본 값 입니다.\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const { users } = state;\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return (\n    <UserDispatch.Provider value={dispatch}>\n      {/* \n      Context 를 만들면, Context 안에 Provider 라는 컴포넌트가 들어있는데\n      이 컴포넌트를 통하여 Context 의 값을 정할 수 있습니다. \n      이 컴포넌트를 사용할 때, value 라는 값을 설정해주면 됩니다.\n      Provider 에 의하여 감싸진 컴포넌트 중 어디서든지\n       우리가 Context 의 값을 다른 곳에서 바로 조회해서 사용 할 수 있습니다. */}\n      <CreateUser />\n      <UserList users={users} />\n      <div>활성사용자 수 : {count}</div>\n    </UserDispatch.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import Counter from './Counter';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Counter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}